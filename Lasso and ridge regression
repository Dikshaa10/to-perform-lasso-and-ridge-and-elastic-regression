## python
```python
import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge, Lasso
from sklearn.metrics import mean_squared_error, r2_score

# Load dataset
data = load_diabetes()
X, y = data.data, data.target
feature_names = data.feature_names

# Split train/test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Ridge Regression
ridge = Ridge(alpha=1.0)
ridge.fit(X_train, y_train)
ridge_pred = ridge.predict(X_test)

# Lasso Regression
lasso = Lasso(alpha=0.1)
lasso.fit(X_train, y_train)
lasso_pred = lasso.predict(X_test)

# ---- Performance ----
print("Ridge -> MSE:", mean_squared_error(y_test, ridge_pred), "R²:", r2_score(y_test, ridge_pred))
print("Lasso -> MSE:", mean_squared_error(y_test, lasso_pred), "R²:", r2_score(y_test, lasso_pred))

# ---- Plot 1: Predicted vs Actual ----
plt.figure(figsize=(12, 5))

plt.subplot(1, 2, 1)
plt.scatter(y_test, ridge_pred, color="blue", label="Ridge Predictions")
plt.scatter(y_test, lasso_pred, color="red", label="Lasso Predictions", alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'k--')
plt.xlabel("Actual Values")
plt.ylabel("Predicted Values")
plt.title("Predicted vs Actual")
plt.legend()

# ---- Plot 2: Coefficient Comparison ----
plt.subplot(1, 2, 2)
plt.bar(np.arange(len(feature_names)) - 0.15, ridge.coef_, width=0.3, label="Ridge", color="blue")
plt.bar(np.arange(len(feature_names)) + 0.15, lasso.coef_, width=0.3, label="Lasso", color="red")
plt.xticks(np.arange(len(feature_names)), feature_names, rotation=45)
plt.title("Coefficient Comparison")
plt.ylabel("Coefficient Value")
plt.legend()

plt.tight_layout()
plt.show()
```
